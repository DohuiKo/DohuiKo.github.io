(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{415:function(t,i,v){"use strict";v.r(i);var _=v(56),e=Object(_.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"깃허브에서-말하는-버전이란"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#깃허브에서-말하는-버전이란"}},[t._v("#")]),t._v(" 깃허브에서 말하는 버전이란?")]),t._v(" "),v("h3",{attrs:{id:"우리가-생각하는-일반적인-버전"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#우리가-생각하는-일반적인-버전"}},[t._v("#")]),t._v(" 우리가 생각하는 일반적인 '버전'")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://user-images.githubusercontent.com/81297662/163311364-4b2ebfe8-76f2-4e4f-ba29-a34259c7fed9.png",alt:"Untitled (3)"}})]),t._v(" "),v("p",[t._v("여기 보이는 사진처럼 완성 결과물이 바뀔 때 마다 "),v("code",[t._v("다른이름으로 저장")]),t._v(" 하여 파일을 저장한 경험이 다들 있을 것이다. 이런 경험을 해보았다면 버전이라는 개념을 이미 접해본 경험이 있다고 볼 수 있다.")]),t._v(" "),v("p",[t._v("일반적으로 문서를 작성할 때 변경사항이 있으면 수정을 하고, 수정하기 전 원본파일을 보존하고 싶다면 다른이름으로 저장을 하고, 수정 전/수정 후 여러 개의 파일이 지속적으로 만들어지게 된다. 파일 이름 네이밍을 통해서 어느 시간대, 어떤 특성을 가진 결과물이 수정한 파일의 특이사항을 유추할 수 있게끔 도와주기는 하지만 이렇게 만들어진 버전은 숫자가 많아지면 관리가 어렵다는 단점이 있다.")]),t._v(" "),v("p",[t._v("이렇게 우리가 word나 한글 파일을 작성할 때는 여러 파일이 생성해야만 여러 버전으로 저장이 가능하지만, 문서관리 툴인 Git을 사용한다면 다른 이름으로 여러 파일을 생성할 필요도 없으며 각각 다른 이름을 가진 파일마다 어떤 변경사항이 적용된 것인지까지도 "),v("code",[t._v("commit message")]),t._v(" 를 통해서 함께 관리할 수 있게 된다.")]),t._v(" "),v("p",[t._v("정리하자면 "),v("code",[t._v("Git")]),t._v(" 을 사용한다면 문서를 수정하고 저장할 때마다 ‘버전’이 생기고, ‘버전’만 관리한다면 ‘최종본’, ‘최최종본’처럼 새로 이름을 부여하지 않고 원래 파일 이름을 그대로 유지하면서 파일에서 무엇을 변경했는지 변경 시점마다 저장할 수 있다. 무엇보다도 각 버전을 "),v("code",[t._v("Git")]),t._v("에서 모두 저장하고 있기 때문에 현재 버전에 문제가 있다면 이전 버전으로 쉽게 돌아갈 수 있다는 것이 가장 큰 장점이다.")]),t._v(" "),v("h3",{attrs:{id:"git의-버전"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git의-버전"}},[t._v("#")]),t._v(" Git의 버전")]),t._v(" "),v("p",[t._v("그렇다면 이제 본격적으로 Git의 버전에 대해서 알아볼까?")]),t._v(" "),v("ol",[v("li",[t._v("스테이지와 커밋")])]),t._v(" "),v("ul",[v("li",[t._v("Git은 어떻게 파일 이름은 그대로 유지하면서 수정 내역을 기록할까? 그 이유는 바로 Git에 스테이지와 저장소라는 가상의 공간이 존재하기 때문이다. 이제 각각이 무엇인지 설명드리겠습니다.")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("작업트리")])]),t._v(" "),v("ul",[v("li",[t._v("작업트리(working tree)는 파일 수정, 저장 등의 작업을 하는 디렉터리(폴더)로, ‘작업 디렉터리(working directory)’라고도 한다.. 즉, 여러분이 작업을 하는 곳, 우리 눈에 보이는 디렉터리가 바로 작업트리이다.")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("로컬 저장소")])]),t._v(" "),v("ul",[v("li",[t._v("저장소(repository)는 스테이지에서 대기하고 있던 파일들을 버전으로 만들어 저장하는 곳이다.")])]),t._v(" "),v("p",[t._v("Git은 원격 저장소와 로컬 저장소 두 종류의 저장소를 제공한다.")]),t._v(" "),v("ul",[v("li",[t._v("원격 저장소(Remote Repository)는 파일이 원격 저장소 전용 서버에서 관리되며 여러 사람이 함께 공유하기 위한 저장소이다.")]),t._v(" "),v("li",[t._v("로컬 저장소(Local Repository)는 내 PC에 파일이 저장되는 개인 전용 저장소이다.")])]),t._v(" "),v("p",[t._v("이때, 맨 처음 소개한 명령어 git init 을 한 파일 안에 .git 디렉터리 가 생성되어 관리되고 있다는 점을 알아두어야 한다. git 파일은 평소에는 숨긴 항목으로 지정돼있어서 눈에 보이지 않는다. 그래서 스테이지와 저장소는 눈에 보이지 않는 개념이기 때문에 많은 사람들이 깃을 접하는데 어려움을 겪는다. 이럴 때는  .git 디렉토리 안에 숨은 파일 형태로 존재한다는 것을 기억하면 이해하는데 도움이 된다.")])])}),[],!1,null,null,null);i.default=e.exports}}]);