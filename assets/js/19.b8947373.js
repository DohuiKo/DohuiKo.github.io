(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{416:function(t,e,_){"use strict";_.r(e);var v=_(56),i=Object(v.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"github-필수-명령어-소개"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#github-필수-명령어-소개"}},[t._v("#")]),t._v(" Github 필수 명령어 소개")]),t._v(" "),_("h3",{attrs:{id:"_1-깃-저장소-만들기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-깃-저장소-만들기"}},[t._v("#")]),t._v(" 1) 깃 저장소 만들기")]),t._v(" "),_("ul",[_("li",[t._v("깃 초기화하기 - "),_("code",[t._v("$ git init")])]),t._v(" "),_("li",[t._v("현재 디렉터리안에 어떤 문서 있는지 확인 "),_("code",[t._v("$ ls")])]),t._v(" "),_("li",[t._v("디렉터리간 이동 "),_("code",[t._v("$ cd [이동할 디렉터리 이름 ]")])]),t._v(" "),_("li",[t._v("상위 폴더로 이동 "),_("code",[t._v("$ cd ..")])])]),t._v(" "),_("h3",{attrs:{id:"_2-버전-만들기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-버전-만들기"}},[t._v("#")]),t._v(" 2) 버전 만들기")]),t._v(" "),_("ul",[_("li",[t._v("현재 깃의 상태 확인하기 "),_("code",[t._v("$ git status")])]),t._v(" "),_("li",[t._v("수정한 파일을 스테이징 하기 "),_("code",[t._v("$ git add [스테이징할 파일 이름]")])])]),t._v(" "),_("p",[t._v("*한꺼번에 모든 변경사항을 올리려면 "),_("code",[t._v("$ git add .")])]),t._v(" "),_("ul",[_("li",[t._v("스테이지에 올라온 파일 커밋하기 "),_("code",[t._v('$ git commit -m “message"')])])]),t._v(" "),_("h3",{attrs:{id:"_3-커밋-내용-확인하기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-커밋-내용-확인하기"}},[t._v("#")]),t._v(" 3) 커밋 내용 확인하기")]),t._v(" "),_("ul",[_("li",[t._v("버전이 제대로 만들어졌는지 확인하기 "),_("code",[t._v("$ git log")])])]),t._v(" "),_("p",[t._v("*간략하게 한 줄로 표기하려면 "),_("code",[t._v("$ git log —oneline")])]),t._v(" "),_("ul",[_("li",[t._v("변경 사항 확인하기 "),_("code",[t._v("$ git diff")])])]),t._v(" "),_("p",[t._v("이때 명령어들의 쓰임새를 살펴봅시다. 여기 이미지를 보시면 쉽게 이해하실 수 있는데요. "),_("code",[t._v("commit")]),t._v(" 옆에 기다란 영문 표기가 되어있는 문장을 "),_("code",[t._v("커밋 해시")]),t._v(" 라고 합니다. "),_("code",[t._v("커밋 해시")]),t._v(" 는 버전의 이름이라고 생각하시면 됩니다. 그래서 이 개념을 응용하면 "),_("code",[t._v("$ git reset --hard [커밋 해시]")]),t._v(" 명령어를 사용하여 특정 버전으로 이동할 수 있게 되는 것입니다. 한 가지 더 말씀드리자면, 현재 작업하기 직전의 버전으로 이동할 때는 커밋 해시 필요 없이 "),_("code",[t._v("$ git reset --hard HEAD^")]),t._v(" 명령어를 사용하시면 됩니다. 왜 "),_("code",[t._v("HEAD^")]),t._v(" 을 사용하면 이전 명령어로 돌아가질 까요? 그것은 여기 이미지에도 나타나있듯이 "),_("code",[t._v("HEAD")]),t._v(" 가 가장 최신의 버전을 뜻하고, "),_("code",[t._v("^")]),t._v(" 문자가 “이전”을 의미하기 때문이죠. 응용한다면 "),_("code",[t._v("HEAD~2")]),t._v(" 이런식으로 이전의 이전 버전으로 이동하는 것도 가능합니다. 이 외에는 커밋에 대한 정보가 "),_("code",[t._v("git log")]),t._v(" 에 담겨지게 되는데요, Git이 협업을 위한 도구인 만큼 누가 작성한 commit인지, 버전을 만든 날짜는 언제인지, commit을 하면서 남긴 메세지는 무엇인지 확인할 수 있습니다.")]),t._v(" "),_("p",[t._v("참고로, "),_("code",[t._v("commit")]),t._v(" 할 때 작성하는 "),_("code",[t._v("message")]),t._v(" 는 나중에 협업할 때 해당 버전에서 어떤 작업을 마친 것인지 확인할 수 있는 근거가 되기 때문에 "),_("a",{attrs:{href:"https://determination.tistory.com/entry/%EA%B9%83-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%BB%A8%EB%B2%A4%EC%85%98Git-Commit-Message-Convention",target:"_blank",rel:"noopener noreferrer"}},[t._v("깃 커밋 메세지 컨벤션"),_("OutboundLink")],1),t._v("을 더 자세히 공부해보시는 것을 추천드립니다.")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://user-images.githubusercontent.com/81297662/164027563-35702bfb-f0a4-4e84-936b-035208fc14d5.png",alt:"Untitled (4)"}})]),t._v(" "),_("p",[t._v("또, "),_("code",[t._v("$ git diff")]),t._v(" 명령어를 활용하면 변경사항이 무엇이 있는지 구체적으로 확인할 수 있습니다.")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://user-images.githubusercontent.com/81297662/164027569-7089ee50-994e-4df6-942f-1e183884c8c9.png",alt:"Untitled (5)"}})]),t._v(" "),_("h3",{attrs:{id:"_4-작업-되돌리기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-작업-되돌리기"}},[t._v("#")]),t._v(" 4) 작업 되돌리기")]),t._v(" "),_("ul",[_("li",[t._v("최신 커밋 되돌리기 "),_("code",[t._v("$ git reset --hard HEAD^")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);