(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{428:function(t,a,e){"use strict";e.r(a);var s=e(56),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"_1-프래그먼트-fragment-를-사용하여-불필요한-div태그-남발을-막을-수-있음"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-프래그먼트-fragment-를-사용하여-불필요한-div태그-남발을-막을-수-있음"}},[t._v("#")]),t._v(" 1) 프래그먼트(Fragment)를 사용하여 불필요한 div태그 남발을 막을 수 있음.")]),t._v(" "),e("h3",{attrs:{id:"_2-jsx에서-중괄호를-이용하여-화면에-값을-출력하는-것이-가능함"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-jsx에서-중괄호를-이용하여-화면에-값을-출력하는-것이-가능함"}},[t._v("#")]),t._v(" 2) JSX에서 중괄호를 이용하여 화면에 값을 출력하는 것이 가능함.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("reactDOM.render(\n  <h1>나만의{product}주문하기</h1>\n  document.getElementById('root')\n)\n")])])]),e("h3",{attrs:{id:"_3-리액트에서-이벤트-핸들러-사용하기-버튼-클릭해서-동작하게-만들기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-리액트에서-이벤트-핸들러-사용하기-버튼-클릭해서-동작하게-만들기"}},[t._v("#")]),t._v(" 3) 리액트에서 이벤트 핸들러 사용하기 (버튼 클릭해서 동작하게 만들기)")]),t._v(" "),e("ul",[e("li",[t._v("JSX 문법에서 태그에 속성을 지정하자!")])]),t._v(" "),e("p",[e("code",[t._v("<button onClick ={handleClick}> 가위 </button>")])]),t._v(" "),e("ol",[e("li",[t._v("이때, 속성 이름은 카멜케이스로 작성한다.")])]),t._v(" "),e("ul",[e("li",[t._v("자주 쓰는 속성: "),e("code",[t._v("onClick")]),t._v(","),e("code",[t._v("onBlur")]),t._v(", "),e("code",[t._v("onFocus")]),t._v(", "),e("code",[t._v("onMouseOver")])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("data-* 속성은 예외이다.")])]),t._v(" "),e("h3",{attrs:{id:"_4-jsx-사용시-자바스크립트-예약어-for-class-을-사용할-수-없음"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-jsx-사용시-자바스크립트-예약어-for-class-을-사용할-수-없음"}},[t._v("#")]),t._v(" 4) JSX 사용시, 자바스크립트 예약어(for, class)을 사용할 수 없음.")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("for")]),t._v(" 는 자바스크립트 반복문 키워드와 겹치므로 "),e("code",[t._v("htmlFor")]),t._v(" 로, "),e("code",[t._v("class")]),t._v("도 마찬가지로 자바스크립트 반복문 키워드와 겹치기 때문에 "),e("code",[t._v("className")]),t._v("으로 작성해주어야 한다.")])]),t._v(" "),e("h3",{attrs:{id:"_5-리액트-앨리먼트"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-리액트-앨리먼트"}},[t._v("#")]),t._v(" 5) 리액트 앨리먼트")]),t._v(" "),e("ul",[e("li",[t._v("JSX문법으로 작성한 요소는 자바스크립트 객체가 된다.")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import ReactDom from 'react-dom';\nconst element = <h1> 안녕 리액트 </h1>;\nReactDom.render(element, document.getElementById('root));\n")])])]),e("ul",[e("li",[t._v("위와 같은 객체를 리액트 앨리먼트라고 부른다.")]),t._v(" "),e("li",[t._v("리액트 앨리먼트를 reactDom.render 함수의 아규먼트로 전달하게 되면 리액트가 객체 형태의 값을 해석해서 HTML 형태로 브라우저에 띄워준다.")])]),t._v(" "),e("h3",{attrs:{id:"_6-리액트-컴포넌트"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-리액트-컴포넌트"}},[t._v("#")]),t._v(" 6) 리액트 컴포넌트")]),t._v(" "),e("ul",[e("li",[t._v("리액트 앨리먼트를 보다 더 자유롭게 다루기 위한 문법이다. (Js 함수를 활용하여)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Hello() {\n  return <h1> 안녕 리액트 <h1>\n}\nconst element = (\n  <>\n    <Hello/> // 1. 컴포넌트 함수 이름을 통해 하나의 태그처럼 활용한다. 2. 모듈 문법으로 활용하여 보다 독립적으로 컴포넌트 특성에 집중해 코드를 작성할 수 있다.\n  </Hello>\n);\n")])])]),e("ul",[e("li",[t._v("화면에 주사위를 만든다고 가정하고 리액트 컴포넌트를 사용해보자.")])]),t._v(" "),e("p",[t._v("[Dice.js]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import dice from 이미지파일 경로\nfunction Dice () {\n  return <img src = {dice} alt="주사위"/>;\n}\nexport default Dice;\n')])])]),e("p",[t._v("[App.js]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import Dice from './Dice';\nfunction App() {\n  return (\n    <div>\n      <Dice/> //컴포넌트 함수 이름을 통해 하나의 태그처럼 활용\n    </div>\n  )\n}\nexport default App;\n")])])]),e("h3",{attrs:{id:"_7-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-props"}},[t._v("#")]),t._v(" 7) Props")]),t._v(" "),e("ul",[e("li",[t._v("리액트에서 컴포넌트에 지정한 속성들을 "),e("code",[t._v("Props")]),t._v("라고 부른다.")])]),t._v(" "),e("p",[t._v("만약 App.js 파일과 Button.js 파일이 있다고 가정해 보자.")]),t._v(" "),e("p",[t._v("[App.js]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function App() {\n  return (\n    <div>\n      <Button color = "purple" /> // 리액트에서는 이런 식으로 컴포넌트에 속성 지정이 가능하다.\n    </div>\n  );\n}\n')])])]),e("p",[t._v("[Button.js]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import btnPurple from './assets/btnPurple';\nfunction Button(purple) {\n  return <img src = {btnPurple} alt=\"보라색 헤더\">\n}\n")])])]),e("ul",[e("li",[t._v("App 함수에서 사용하는 Button 컴포넌트에 color라는 속성을 purple로 지정해주고, App함수 내부에서 props 라는 파라미터를 만들어 보라색 버튼을 출력한 것이다.")]),t._v(" "),e("li",[t._v("props 파라미터를 활용해서 똑같은 컴포넌트이지만 전달된 속성 값에 따라서 원하는대로 다른 모습을 화면에 그릴 수 있다. 이해가 가지 않는다면 예시를 살펴보자!")]),t._v(" "),e("li",[t._v("가위바위보를 예시를 들어보자.")])]),t._v(" "),e("p",[t._v("[App.js]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import handIcon from \'./HandIcon\';\nfunction App() {\n  return (\n    <div>\n      <handIcon value="rock" />\n      <handIcon value="scissor" />\n      <handIcon value="paper" />\n    </div>\n  );\n}\n\nexport default App;\n')])])]),e("p",[t._v("[HandIcon.js]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import rockImg from './assets/rock.png';\nimport scissorImg from './assets/scissor.png';\nimport paperImg from './assets/paper.png';\n\nconst IMAGES = { //전달받은 값에 따라 서로 다른 이미지를 보여주기 위해 만든 객체.\n  rock: rockImg,\n  scissor: scissorImg,\n  paper: paperImg,\n};\n\nfunction HandIcom {{value}} { //전달받은 값에 따라 서로 다른 이미지를 보여주는 코드\n  const src = IMAGES[value]; //매번 다른 이미지를 불러오는 코드를 작성하는 것 보다 IMAGES 객체를 만들어서 간소화하여 코드를 작성하는 것이 편리함.\n  return <img src={src} alt={value} />;\n}\n")])])]),e("ul",[e("li",[t._v("이런 식으로 코드를 작성하면 handIcon 컴포넌트를 한 번만 만들어두면 매번 이미지파일을 직접 다루지 않더라도 컴포넌트의 value prop만 정해주면 되니 편리하다는 이점이 있다.")])]),t._v(" "),e("p",[t._v("[!다시 정리!]")]),t._v(" "),e("ul",[e("li",[t._v("리액트에서는 컴포넌트에 데이터를 전달해주기 위해서 props를 활용한다.")]),t._v(" "),e("li",[t._v("JSX 문법으로 코드를 작성할 때 HTML 태그에 속성을 지정하듯이 컴포넌트 태그에 속성을 지정해주면 컴포넌트를 정의하는 함수의 첫 번째 파라미터로 이 속성들이 하나의 객체 형태로 모여서 전달이 되는 원리이다.")]),t._v(" "),e("li",[t._v("컴포넌트 내부에서 props 값을 활용하려면 컴포넌트를 정의한 함수에 첫 번째 파라미터를 작성해서 이 값을 객체처럼 활용해야 한다.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);