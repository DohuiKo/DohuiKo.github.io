(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{419:function(a,e,s){"use strict";s.r(e);var t=s(56),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("###forEach 함수란?\nArray 객체에서만 사용하능한 method로 배열의 요소들을 반복하여 작업을 수행한다.\n특별히 반복할 때 세 가지의 파라미터를 활용하여 기존의 for문보다 유용하게 코드를 짤 수 있다.")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const members = ['예은','희관', '도희','선아'];\n\nmembers.forEach((member) => {\n  console.log(`${member}님이 입장하셨습니다.`);\n})\n")])])]),s("p",[a._v("실행 결과 ▼")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("예은님이 입장하셨습니다.\n희관님이 입장하셨습니다.\n도희님이 입장하셨습니다.\n선아님이 입장하셨습니다.\n")])])]),s("p",[a._v("만약 자바스크립트 코드였다면?")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const members = ['예은','희관', '도희','선아'];\n\nfor( let member of members) {\n  console.log(`${member}님이 입장하셨습니다.`);\n}\n")])])]),s("h3",{attrs:{id:"foreach-함수의-파라미터"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreach-함수의-파라미터"}},[a._v("#")]),a._v(" forEach 함수의 파라미터")]),a._v(" "),s("ol",[s("li",[a._v("첫번째 파라미터는 배열의 요소이기 때문에 반드시 있어야 하고")]),a._v(" "),s("li",[a._v("두번째 파라미터는 작성해주게 되면 요소의 인덱스를 관리할 수 있게 된다.")])]),a._v(" "),s("p",[a._v("그래서 콘솔에 출력하는 메세지 앞쪽에 index를 같이 출력해줄 수 있다.")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const members = ['예은','희관', '도희','선아'];\n\nmembers.forEach((member, i) => {\n  console.log(`${i} ${member}님이 입장하셨습니다.`);\n})\n")])])]),s("p",[a._v("실행 결과 ▼")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 예은님이 입장하셨습니다.\n1 희관님이 입장하셨습니다.\n2 도희님이 입장하셨습니다.\n3 선아님이 입장하셨습니다.\n")])])]),s("p",[a._v("인덱스도 활용할 수 있으니 for구문보다 훨씬 유용하다는걸 느낄 수 있다.")]),a._v(" "),s("p",[a._v("또 인덱스는 다른 배열과 함께 활용하기에도 좋다.")]),a._v(" "),s("p",[a._v("✨세번째 파라미터")]),a._v(" "),s("ul",[s("li",[a._v("반복 중인 배열 자체가 전달된다.")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const members = ['예은','희관', '도희','선아'];\n\nmembers.forEach((member, i, arr) => {\n  console.log(`${i} ${member}님이 입장하셨습니다.`);\n  console.log(arr);\n})\n")])])]),s("p",[a._v("실행 결과 ▼")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 예은님이 입장하셨습니다.\n[ '예은', '희관', '도희', '선아' ]\n1 희관님이 입장하셨습니다.\n[ '예은', '희관', '도희', '선아' ]\n2 도희님이 입장하셨습니다.\n[ '예은', '희관', '도희', '선아' ]\n3 선아님이 입장하셨습니다.\n[ '예은', '희관', '도희', '선아' ]\n")])])]),s("h3",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" map")]),a._v(" "),s("ul",[s("li",[a._v("forEach와 거의 비슷하게 동작하지만 map은 메소드의 호출 결과로 새로운 배열을 리턴한다는 것이 forEach와 차이점이다.")]),a._v(" "),s("li",[a._v("따라서 사용할 때 메소드를 사용해서 나온 배열을 저장할 변수를 지정하여 사용한다.")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const firstNames = ['예은','희관', '도희','선아'];\nconst lastNames = ['홍','설','고','민'];\n\nconst fullNames = firstNames.map((firstNames, i) => lastNames[i] + firstNames);\n\nconsole.log(fullNames);\n")])])]),s("p",[a._v("실행 결과 ▼")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[ '홍예은', '설희관', '고도희', '민선아' ]\n")])])]),s("ul",[s("li",[a._v("이런식으로 특정 배열의 요소들을 합칠 때는 앞으로 forEach나 map을 활용해보자!")])])])}),[],!1,null,null,null);e.default=r.exports}}]);